import Experiment from "../abm/Experiment";
/**
 * Allows to users to notify changes in the simulation to generate output data of that.
 * This is achieved with the use of the update @method, which is responsible for
 * capturing the information from the simulation. To specify what be needs to be
 * captured, the user could be make use of the followings @decorators.
 *
 * @AgentCountBoolean(name, countFalse) : allows to register "boolean" properties of
 * agents, to after, when update is called, register the state of this property
 * in all the agents which have this property, to be added to the output.
 *
 * @AgentStateIntegerCount(name, value) : allows to register "Integers" properties
 * as states of the agents, to be counted, registered and added to the output
 * after update was called.
 *
 * @AccumulateAgentValue(name) : allows to register an accumulated property
 * of agents to being added to the output each time the update was called.
 *
 * @AccumulateEnvironmentValue(name) : allows to register an accumulated property
 * of environment, which increment by each tick of clock, to after be
 * added to the output each time the update was called.
 *
 * @EnvironmentCount(name) : allows to register properties of the environment to be
 * counted and added to the output each time the update is called.
 *
 * @ExperimentCount(name) : allows to register properties of the experiment to be
 * counted and added to the output each time the update is called and normally that
 * property is updated for each repetition
 *
 */
export default class IDataHandler {
    experiment: Experiment | any;
    finalOutput: any[];
    /**
     * Insert the data of toAdd object in to the row object
     * @param row : object : The object to which the information is inserted
     * @param toAdd : object : The object from which the information is copied
     * @private this method is called inside the writeLine method
     */
    private static generateRow;
    /**
     * Makes a dump of the Output generated by the simulation, generating a csv file with the output formatted.
     */
    private static dumpOutput;
    /**
     * Allows to notify changes in the simulation. The DataHandler is notified if the simulation
     * changes by the calling of this method, what calls the writeLine method which creates and
     * extracts the data from the simulation and then are these added to the Output array.
     *
     * Normally this method is called each time the tick of the clock changes.
     */
    update(): void;
    /**
     * Calls and calculates all's of the environment and agent vars what should be registered
     * by the DataHandler. Is like take a snapshot of the simulation and saves only the selected
     * data, this doing when some change is notified to the DataHandler. Usually the DataHandler
     * is notified every time when the tick of the clock changes.
     * @private this method is called by the update.
     */
    private writeLine;
    /**
     * Calculates the environment vars to be counted in the simulation for each tick of the clock
     * @private this method is called on writeLine method.
     */
    private calculateEnvironmentAccum;
    /**
     * Calculates the environment vars to be counted in the simulation for each tick of the clock
     * @private this method is called on writeLine method.
     */
    private calculateEnvironmentCounts;
    /**
     * Calculates the agent states to be counted vars of the selected parameters for each agent in the simulation
     * @private this method is called on writeLine method.
     */
    private calculateAgentStateIntegerCounts;
    /**
     * Registers the value from some experiment and added that to the output, normally is registered for each repetition
     * @private this method is called on writeLine method
     */
    private calculateExperimentCounts;
    /**
     * Calculates the agent booleans vars of the selected parameters for each agent in the simulation
     * @private this method is called on writeLine method.
     */
    private calculateAgentBooleanCounts;
    /**
     * Calculates the accumulation vars of the selected parameters for each agent in the simulation.
     * @private this method is called on writeLine method.
     */
    private calculateAgentAccum;
    getOutput(): any[];
    clearOutput(): any[];
    /**
     * Exports a file with the desired data from finalOutput
     */
    private writeFileData;
    /**
     * Write a CSV file with the output of the Experiment
     */
    writeCSVFile(): void;
    /**
     * Return the last iteration state of the simulation
     */
    getLastOutputRow(): any;
    getState(): any;
    writeFASOWState(): void;
}
