import Experiment from "./abm/Experiment";
import IDataHandler from "./datahandler/IDataHandler";
import ITowerHandler from "./reflection/tower/ITowerHandler";
import ITimeKeeper from "./timekeeper/ITimeKeeper";
import MetaExperimentConfig from "./config/metaconfig/MetaExperimentConfig";
export default class FASOW {
    private dataHandler;
    private towerHandler;
    private timeKeeper;
    private experiment;
    constructor();
    loadActions(): void;
    loadAgents(): void;
    loadEnvironments(): void;
    loadExperiments(): void;
    getDataHandler(): IDataHandler;
    getTowerHandler(): ITowerHandler;
    getTimeKeeper(): ITimeKeeper;
    /**
     * Returns a "snapshot" of fasow.
     * The format given is the following:
     *
     * state: {
     *     actions:[
     *         {propertyKey: string, propertyType: boolean|string|number}
     *     ],
     *     agents:[
     *         {propertyKey: string, propertyType: boolean|string|number}
     *     ],
     *     environments:[
     *         {propertyKey: string, propertyType: boolean|string|number}
     *     ],
     *     experiments:[
     *         {propertyKey: string, propertyType: boolean|string|number}
     *     ],
     *     agent_states:[
     *         {propertyKey: string, column_name: string, value: number}
     *     ]
     * }
     */
    getState(): any;
    runExperiment(experiment: typeof Experiment): void;
    /**
     * Runs an experiment by his name, this process is
     * 1.- select the experiment by his name
     * 2.- run selected experiment.
     *
     * Remember check if the experiment are registered in fasow or only use
     * strings given by fasow.getState().
     * @param experiment
     */
    runExperimentByName(experiment: string): void;
    /**
     * Select experiment by his "class" or "type".
     * This method is usually used for debugging the backend.
     * @param experiment : Experiment : Some typeof Experiment.
     */
    selectExperiment(experiment: typeof Experiment): void;
    /**
     * Select some experiment by the name.
     * Before selecting some experiment by his name, check if the experiment
     * is registered in fasow. Other way without errors is, only select
     * experiments by name given by fasow.getState().
     * @param experiment
     */
    selectExperimentByName(experiment: string): void;
    /**
     * Runs the selected experiment, if not exists any selected experiment
     * the execution would can be stopped for Null or Undefined reference.
     */
    runSelectedExperiment(): void;
    private privateRunExperiment;
    /**
     * Registers a new Experiment, that can be executed after.
     * @param experiment :  Experiment : The class of the experiment to be registered
     */
    registerNewExperiment(experiment: typeof Experiment): void;
    /**
     * Calls to fasow to write a csv file.
     */
    writeFASOWState(): void;
    /**
     * Returns the output generated by the simulation
     */
    getOutput(): any[];
    /**
     * Clears the output generated by the datahandler and then returns that
     */
    clearDataHandlerOutput(): any[];
    /**
     * Return the last iteration state of the simulation
     */
    getLastOutputRow(): any[];
    initializeSelectedExperiment(): Experiment;
    getExperimentConfig(): MetaExperimentConfig;
}
